using System.Collections.Generic;
using UnityEngine;

public class ExploitationManager : Singleton<ExploitationManager>
{
    private List<Tile> _infrastructures = new List<Tile>();
    private List<GameObject> _buttons = new List<GameObject>();
    private List<Vector3> _interactionPositions = new List<Vector3>();

    protected override void OnAwake()
    {
        GameManager.Instance.event_newPhase.AddListener(StartPhase);
        GameManager.Instance.event_newTileSelected.AddListener(NewTileSelected);
        GameManager.Instance.event_tileUnselected.AddListener(TileUnselected);
    }

    private void StartPhase(Phase phase)
    {
        if (phase != Phase.Exploit)
            return;

        foreach (Tile tile in ExpansionManager.Instance.ClaimedTiles) 
        {
            foreach (ResourceValue item in tile.Incomes)
            {
                ResourcesManager.Instance.UpdateResource(item.resource, item.value, Transaction.Gain);
            }
        }
    }

    private void NewTileSelected(Tile tile)
    {
        if (GameManager.Instance.CurrentPhase != Phase.Exploit)
            return;

        if (tile.Claimed)
        {
            if (tile.TileData as InfrastructureData)
            {
                _interactionPositions = Utilities.GetInteractionButtonsPosition(tile.transform.position, 1);
                DestroyInteraction(tile, 0);
                return;
            }

            int availableInfra = tile.TileData.AvailableInfrastructures.Count;
            if (availableInfra > 0)
            {
                _interactionPositions = Utilities.GetInteractionButtonsPosition(tile.transform.position, availableInfra);
                for (int i = 0; i < availableInfra; i++)
                {
                    InfrastructureInteraction(tile, i, tile.TileData.AvailableInfrastructures[i]);
                }
            }
        }
    }

    private void InfrastructureInteraction(Tile tile, int positionIndex, InfrastructureData data)
    {
        GameObject button = Instantiate(GameManager.Instance.InteractionPrefab, _interactionPositions[positionIndex], Quaternion.identity);
        button.GetComponent<UI_InteractionButton>().Initialize(tile, Interaction.Infrastructure, data);

        _buttons.Add(button);
    }

    private void DestroyInteraction(Tile tile, int positionIndex)
    {
        GameObject button = Instantiate(GameManager.Instance.InteractionPrefab, _interactionPositions[positionIndex], Quaternion.identity);
        button.GetComponent<UI_InteractionButton>().Initialize(tile, Interaction.Destroy);

        _buttons.Add(button);
    }

    private void TileUnselected()
    {
        foreach (GameObject button in _buttons)
        {
            Destroy(button);
        }
        _buttons.Clear();
    }

    public void BuildInfrastructure(Tile tile, InfrastructureData infrastructure)
    {
        if (ResourcesManager.Instance.CanAfford(infrastructure.Costs))
        {
            foreach (ResourceValue cost in infrastructure.Costs)
            {
                ResourcesManager.Instance.UpdateResource(cost.resource, cost.value, Transaction.Spent);
            }
            tile.TileData = infrastructure;
            _infrastructures.Add(tile);
        }
    } 

    public void DestroyInfrastructure(Tile tile)
    {
        tile.TileData = tile.InitialData;
        _infrastructures.Remove(tile);
    }
}

public enum TypeIncomeUpgrade
{
    Merge, Replace
}
