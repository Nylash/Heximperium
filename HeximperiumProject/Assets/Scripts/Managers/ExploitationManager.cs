using System;
using System.Collections.Generic;
using UnityEngine;

public class ExploitationManager : PhaseManager<ExploitationManager>
{
    #region CONFIGURATION
    [Header("_________________________________________________________")]
    [SerializeField] private List<InfraDataToIntMap> _infraAvailableCopies = new List<InfraDataToIntMap>();
    #endregion

    #region VARIABLES
    private List<Tile> _infrastructures = new List<Tile>();
    #endregion

    #region EVENTS
    public event Action<Tile> OnInfraBuilded;
    public event Action<Tile> OnInfraDestroyed;
    //Tutorial events
    public event Action OnRightTileSelected;
    #endregion

    #region ACCESSORS
    public List<InfraDataToIntMap> InfraAvailableCopies { get => _infraAvailableCopies; }
    public List<Tile> Infrastructures { get => _infrastructures; }
    #endregion

    protected override void OnAwake()
    {
        GameManager.Instance.OnExploitationPhaseStarted += StartPhase;
        GameManager.Instance.OnExploitationPhaseEnded += ConfirmPhase;
        GameManager.Instance.OnNewTileSelected += NewTileSelected;
        GameManager.Instance.OnTileUnselected += TileUnselected;
    }

    #region INCOME ACCESSORS
    public int GetResourceIncomeByInfra(Resource resource)
    {
        int value = 0;
        foreach (Tile item in _infrastructures)
        {
            foreach(ResourceToIntMap income in item.Incomes)
            {
                if(income.resource == resource)
                {
                    value += income.value;
                }
            }
        }
        return value;
    }

    public int GetResourceIncomeByBasicTiles(Resource resource)
    {
        int value = 0;
        foreach (Tile item in ExpansionManager.Instance.ClaimedTiles)
        {
            if(item.TileData is BasicTileData)
            {
                foreach (ResourceToIntMap income in item.Incomes)
                {
                    if (income.resource == resource)
                    {
                        value += income.value;
                    }
                }
            }
        }
        return value;
    }

    public int GetResourceIncomeByAllTiles(Resource resource)
    {
        int value = 0;
        foreach (Tile item in ExpansionManager.Instance.ClaimedTiles)
        {
            foreach (ResourceToIntMap income in item.Incomes)
            {
                if (income.resource == resource)
                {
                    value += income.value;
                }
            }
        }
        return value;
    }
    #endregion

    #region PHASE LOGIC
    protected override void StartPhase()
    {
        //Earn incomes of every claimed tiles
        foreach (Tile tile in ExpansionManager.Instance.ClaimedTiles) 
            ResourcesManager.Instance.UpdateResource(tile.Incomes, Transaction.Gain, tile);

        ResourcesManager.Instance.CHEAT_RESOURCES();
    }

    protected override void ConfirmPhase()
    {
        GameManager.Instance.UnselectTile();

        StartCoroutine(PhaseFinalized());
    }
    #endregion

    protected override void NewTileSelected(Tile tile)
    {
        if (GameManager.Instance.CurrentPhase != Phase.Exploit)
            return;

        _interactionPositions.Clear();

        if (!tile.Claimed)
            return;

        if (TutorialManager.Instance != null)
        {
            if (TutorialManager.Instance.TargetTile != tile)
                return; //If the tile is not the target of the tutorial, do not show interactions
            else
                OnRightTileSelected?.Invoke();
        }

        int availableInfraCount = tile.TileData.AvailableInfrastructures.Count;
        //Show every infrastructures available for this tile
        if (availableInfraCount > 0)
        {
            if(tile.TileData is InfrastructureData data && !data.IsTown && TutorialManager.Instance == null)//Don't show the destroy button if in tutorial
            {
                _interactionPositions = Utilities.GetInteractionButtonsPosition(tile.transform.position, availableInfraCount + 1);
                DestroyInteraction(tile, availableInfraCount);
            }
            else
            {
                _interactionPositions = Utilities.GetInteractionButtonsPosition(tile.transform.position, availableInfraCount);
            }

            for (int i = 0; i < availableInfraCount; i++)
            {
                InfrastructureInteraction(tile, i, tile.TileData.AvailableInfrastructures[i]);
            }
        }
        else if (tile.TileData is InfrastructureData data && !data.IsTown)
        {
            _interactionPositions = Utilities.GetInteractionButtonsPosition(tile.transform.position, 1);
            DestroyInteraction(tile, 0);
        }
    }

    #region INTERACTION
    private void InfrastructureInteraction(Tile tile, int positionIndex, InfrastructureData data)
    {
        _buttons.Add(Utilities.CreateInteractionButton(tile, _interactionPositions[positionIndex], Interaction.Infrastructure, data));
    }

    private void DestroyInteraction(Tile tile, int positionIndex)
    {
        _buttons.Add(Utilities.CreateInteractionButton(tile, _interactionPositions[positionIndex], Interaction.Destroy));
    }

    public void BuildInfrastructure(Tile tile, InfrastructureData infrastructure)
    {
        if (ResourcesManager.Instance.CanAfford(infrastructure.Costs) && IsInfraAvailable(infrastructure))
        {
            InfraAvailableModify(infrastructure, Transaction.Spent);

            ResourcesManager.Instance.UpdateResource(infrastructure.Costs, Transaction.Spent);

            tile.TileData = infrastructure;
            if(!_infrastructures.Contains(tile))//Prevent adding a second ref to the tile when enhancing it
                _infrastructures.Add(tile);
            OnInfraBuilded?.Invoke(tile);
        }
    } 

    public void DestroyInfrastructure(Tile tile)
    {
        if(TryGetLimitedInfrastructureData(tile, out InfrastructureData data))
            InfraAvailableModify(data, Transaction.Gain);

        tile.TileData = tile.InitialData;
        _infrastructures.Remove(tile);
        OnInfraDestroyed?.Invoke(tile);
    }
    #endregion

    #region INFRA AVAILABILITY
    //Check if this infra is available
    public bool IsInfraAvailable(InfrastructureData infra)
    {
        foreach (InfraDataToIntMap item in _infraAvailableCopies)
        {
            if(infra == item.infrastructure)
                return item.availableCopy > 0;
        }
        return true;
    }

    //Modify the available quantity of this infra
    public void InfraAvailableModify(InfrastructureData infra, Transaction transaction)
    {
        foreach (InfraDataToIntMap item in _infraAvailableCopies)
        {
            if (infra == item.infrastructure)
            {
                switch (transaction)
                {
                    case Transaction.Gain:
                        item.availableCopy++;
                        return;
                    case Transaction.Spent:
                        item.availableCopy--;
                        return;
                }
            }
        }
    }

    //Return the Infradata that is available in limited copy (used when destroying an infra)
    private bool TryGetLimitedInfrastructureData(Tile tile, out InfrastructureData infraData)
    {
        foreach (InfraDataToIntMap item in _infraAvailableCopies)
        {
            if (tile.TileData is InfrastructureData data && item.infrastructure == data)
            {
                infraData = data;
                return true;
            }
            else if (tile.PreviousData is InfrastructureData previousData && item.infrastructure == previousData)
            {
                infraData = previousData; 
                return true;
            }
        }
        infraData = null;
        return false;
    }

    public void UpdateTownLimit(int value)
    {
        foreach (InfraDataToIntMap item in _infraAvailableCopies)
        {
            if (item.infrastructure.IsTown)
            {
                item.availableCopy += value;
                UIManager.Instance.UpdateTownLimit();
                return;
            }
        }
    }

    public int GetTownLimit()
    {
        foreach (InfraDataToIntMap item in _infraAvailableCopies)
        {
            if (item.infrastructure.IsTown)
            {
                return item.availableCopy;
            }
        }
        return 0;
    }

    public int GetTownCount()
    {
        int count = 0;
        foreach (Tile tile in _infrastructures)
        {
            if (tile.TileData is InfrastructureData data && data.IsTown)
            {
                count++;
            }
        }
        return count;
    }
    #endregion
}
