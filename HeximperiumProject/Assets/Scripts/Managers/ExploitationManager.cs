using System.Collections.Generic;
using System.Resources;

public class ExploitationManager : Singleton<ExploitationManager>
{
    private List<Tile> _infrastructures = new List<Tile>();

    protected override void OnAwake()
    {
        GameManager.Instance.event_newPhase.AddListener(StartPhase);
        GameManager.Instance.event_newTileSelected.AddListener(NewTileSelected);
    }

    private void StartPhase(Phase phase)
    {
        if (phase != Phase.Exploit)
            return;
        print("Start Exploitation");
    }

    private void NewTileSelected(Tile tile)
    {
        if (GameManager.Instance.CurrentPhase != Phase.Exploit)
            return;
    }

    public void BuildInfrastructure(Tile tile, InfrastructureData infrastructure)
    {
        if (ResourcesManager.Instance.CanAfford(infrastructure.Costs))
        {
            foreach (ResourceCost cost in infrastructure.Costs)
            {
                ResourcesManager.Instance.UpdateResource(cost.resource, cost.cost, true);
            }
            tile.UpdateTile(infrastructure);
            _infrastructures.Add(tile);
        }
    } 
}
