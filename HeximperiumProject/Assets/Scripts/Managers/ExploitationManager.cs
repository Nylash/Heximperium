using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;

public class ExploitationManager : Singleton<ExploitationManager>
{
    #region CONFIGURATION
    [SerializeField] private List<InfraDataToIntMap> _infraAvailableCopies = new List<InfraDataToIntMap>();
    #endregion

    #region VARIABLES
    private List<Tile> _infrastructures = new List<Tile>();
    private List<GameObject> _buttons = new List<GameObject>();
    private List<Vector3> _interactionPositions = new List<Vector3>();
    #endregion

    #region EVENTS
    [HideInInspector] public UnityEvent OnPhaseFinalized = new UnityEvent();
    #endregion

    #region ACCESSORS
    public List<InfraDataToIntMap> InfraAvailableCopies { get => _infraAvailableCopies; }
    #endregion

    protected override void OnAwake()
    {
        GameManager.Instance.OnExploitationPhaseStarted.AddListener(StartPhase);
        GameManager.Instance.OnExploitationPhaseEnded.AddListener(ConfirmPhase);
        GameManager.Instance.OnNewTileSelected.AddListener(NewTileSelected);
        GameManager.Instance.OnTileUnselected.AddListener(TileUnselected);
    }

    #region INCOME ACCESSORS
    public int GetResourceIncomeByInfra(Resource resource)
    {
        int value = 0;
        foreach (Tile item in _infrastructures)
        {
            foreach(ResourceToIntMap income in item.Incomes)
            {
                if(income.resource == resource)
                {
                    value += income.value;
                }
            }
        }
        return value;
    }

    public int GetResourceIncomeByBasicTiles(Resource resource)
    {
        int value = 0;
        foreach (Tile item in ExpansionManager.Instance.ClaimedTiles)
        {
            if(item.TileData is BasicTileData)
            {
                foreach (ResourceToIntMap income in item.Incomes)
                {
                    if (income.resource == resource)
                    {
                        value += income.value;
                    }
                }
            }
        }
        return value;
    }

    public int GetResourceIncomeByAllTiles(Resource resource)
    {
        int value = 0;
        foreach (Tile item in ExpansionManager.Instance.ClaimedTiles)
        {
            foreach (ResourceToIntMap income in item.Incomes)
            {
                if (income.resource == resource)
                {
                    value += income.value;
                }
            }
        }
        return value;
    }
    #endregion

    #region PHASE LOGIC
    private void StartPhase()
    {
        //Earn incomes of every claimed tiles
        foreach (Tile tile in ExpansionManager.Instance.ClaimedTiles) 
            ResourcesManager.Instance.UpdateResource(tile.Incomes, Transaction.Gain, tile);
    }

    private void ConfirmPhase()
    {
        StartCoroutine(PhaseFinalized());
    }

    private IEnumerator PhaseFinalized()
    {
        // Wait for one frame
        yield return null;

        OnPhaseFinalized.Invoke();
    }
    #endregion

    #region TILE SELECTION
    private void NewTileSelected(Tile tile)
    {
        if (GameManager.Instance.CurrentPhase != Phase.Exploit)
            return;

        _interactionPositions.Clear();

        if (tile.Claimed)
        {
            //If the tile had an infrastructure we show the destroy interaction
            if (tile.TileData as InfrastructureData)
            {
                if (tile.TileData.name == "Town")
                    return;
                _interactionPositions = Utilities.GetInteractionButtonsPosition(tile.transform.position, 1);
                DestroyInteraction(tile, 0);
                return;
            }

            //Show every infrastructures available for this tile
            int availableInfra = tile.TileData.AvailableInfrastructures.Count;
            if (availableInfra > 0)
            {
                _interactionPositions = Utilities.GetInteractionButtonsPosition(tile.transform.position, availableInfra);
                for (int i = 0; i < availableInfra; i++)
                {
                    InfrastructureInteraction(tile, i, tile.TileData.AvailableInfrastructures[i]);
                }
            }
        }
    }

    private void TileUnselected()
    {
        foreach (GameObject button in _buttons)
        {
            Destroy(button);
        }
        _buttons.Clear();
    }
    #endregion

    #region INTERACTION
    private void InfrastructureInteraction(Tile tile, int positionIndex, InfrastructureData data)
    {
        _buttons.Add(Utilities.CreateInteractionButton(tile, _interactionPositions[positionIndex], Interaction.Infrastructure, data));
    }

    private void DestroyInteraction(Tile tile, int positionIndex)
    {
        _buttons.Add(Utilities.CreateInteractionButton(tile, _interactionPositions[positionIndex], Interaction.Destroy));
    }

    public void BuildInfrastructure(Tile tile, InfrastructureData infrastructure)
    {
        if (ResourcesManager.Instance.CanAfford(infrastructure.Costs) && IsInfraAvailable(infrastructure))
        {
            InfraAvailableModify(infrastructure, Transaction.Spent);

            ResourcesManager.Instance.UpdateResource(infrastructure.Costs, Transaction.Spent);

            tile.TileData = infrastructure;
            _infrastructures.Add(tile);
        }
    } 

    public void DestroyInfrastructure(Tile tile)
    {
        InfraAvailableModify(tile.TileData as InfrastructureData, Transaction.Gain);
        tile.TileData = tile.InitialData;
        _infrastructures.Remove(tile);
    }

    public void ButtonsFade(bool fade)
    {
        foreach (GameObject item in _buttons)
        {
            item.GetComponent<InteractionButton>().FadeAnimation(fade);
        }
    }
    #endregion

    #region INFRA AVAILABILITY
    //Check if this infra is available
    public bool IsInfraAvailable(InfrastructureData infra)
    {
        foreach (InfraDataToIntMap item in _infraAvailableCopies)
        {
            if(infra == item.infrastructure)
                return item.availableCopy > 0;
        }
        return true;
    }

    //Modify the available quantity of this infra
    public void InfraAvailableModify(InfrastructureData infra, Transaction transaction)
    {
        foreach (InfraDataToIntMap item in _infraAvailableCopies)
        {
            if (infra == item.infrastructure)
            {
                switch (transaction)
                {
                    case Transaction.Gain:
                        item.availableCopy++;
                        break;
                    case Transaction.Spent:
                        item.availableCopy--;
                        break;
                }
            }
        }
    }
    #endregion
}
