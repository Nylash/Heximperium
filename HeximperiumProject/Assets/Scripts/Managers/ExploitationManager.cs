using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Events;

public class ExploitationManager : Singleton<ExploitationManager>
{
    [SerializeField] private List<InfraAvailableCopy> _infraAvailableCopies = new List<InfraAvailableCopy>();

    private List<Tile> _infrastructures = new List<Tile>();
    private List<GameObject> _buttons = new List<GameObject>();
    private List<Vector3> _interactionPositions = new List<Vector3>();

    [HideInInspector] public UnityEvent OnPhaseFinalized;

    private void OnEnable()
    {
        if (OnPhaseFinalized == null)
            OnPhaseFinalized = new UnityEvent();
    }

    protected override void OnAwake()
    {
        GameManager.Instance.OnExploitationPhaseStarted.AddListener(StartPhase);
        GameManager.Instance.OnExploitationPhaseEnded.AddListener(ConfirmPhase);
        GameManager.Instance.OnNewTileSelected.AddListener(NewTileSelected);
        GameManager.Instance.OnTileUnselected.AddListener(TileUnselected);
    }

    private void StartPhase()
    {
        foreach (Tile tile in ExpansionManager.Instance.ClaimedTiles) 
        {
            foreach (ResourceValue item in tile.Incomes)
            {
                ResourcesManager.Instance.UpdateResource(item.resource, item.value, Transaction.Gain);
            }
        }
    }

    private void ConfirmPhase()
    {
        StartCoroutine(PhaseFinalized());
    }

    private IEnumerator PhaseFinalized()
    {
        // Wait for one frame
        yield return null;

        OnPhaseFinalized.Invoke();
    }

    private void NewTileSelected(Tile tile)
    {
        if (GameManager.Instance.CurrentPhase != Phase.Exploit)
            return;

        _interactionPositions.Clear();

        if (tile.Claimed)
        {
            if (tile.TileData as InfrastructureData)
            {
                _interactionPositions = Utilities.GetInteractionButtonsPosition(tile.transform.position, 1);
                DestroyInteraction(tile, 0);
                return;
            }

            int availableInfra = tile.TileData.AvailableInfrastructures.Count;
            if (availableInfra > 0)
            {
                _interactionPositions = Utilities.GetInteractionButtonsPosition(tile.transform.position, availableInfra);
                for (int i = 0; i < availableInfra; i++)
                {
                    InfrastructureInteraction(tile, i, tile.TileData.AvailableInfrastructures[i]);
                }
            }
        }
    }

    private void InfrastructureInteraction(Tile tile, int positionIndex, InfrastructureData data)
    {
        GameObject button = Instantiate(GameManager.Instance.InteractionPrefab, _interactionPositions[positionIndex], Quaternion.identity);
        button.GetComponent<UI_InteractionButton>().Initialize(tile, Interaction.Infrastructure, data);

        _buttons.Add(button);
    }

    private void DestroyInteraction(Tile tile, int positionIndex)
    {
        GameObject button = Instantiate(GameManager.Instance.InteractionPrefab, _interactionPositions[positionIndex], Quaternion.identity);
        button.GetComponent<UI_InteractionButton>().Initialize(tile, Interaction.Destroy);

        _buttons.Add(button);
    }

    private void TileUnselected()
    {
        foreach (GameObject button in _buttons)
        {
            Destroy(button);
        }
        _buttons.Clear();
    }

    public void BuildInfrastructure(Tile tile, InfrastructureData infrastructure)
    {
        if (ResourcesManager.Instance.CanAfford(infrastructure.Costs) && IsInfraAvailable(infrastructure))
        {
            InfraAvailableModify(infrastructure);
            foreach (ResourceValue cost in infrastructure.Costs)
            {
                ResourcesManager.Instance.UpdateResource(cost.resource, cost.value, Transaction.Spent);
            }
            tile.TileData = infrastructure;
            _infrastructures.Add(tile);
        }
    } 

    public void DestroyInfrastructure(Tile tile)
    {
        tile.TileData = tile.InitialData;
        _infrastructures.Remove(tile);
    }

    public bool IsInfraAvailable(InfrastructureData infra)
    {
        foreach (InfraAvailableCopy item in _infraAvailableCopies)
        {
            if(infra == item.infrastructure)
                return item.availableCopy > 0;
        }
        return true;
    }

    private void InfraAvailableModify(InfrastructureData infra)
    {
        foreach (InfraAvailableCopy item in _infraAvailableCopies)
        {
            if (infra == item.infrastructure)
                item.availableCopy--;
        }
    }
}
